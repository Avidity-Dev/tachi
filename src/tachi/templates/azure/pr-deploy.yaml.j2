name: Deploy PR Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}

jobs:
  deploy-pr:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set PR environment name
        id: pr-env
        run: |
          PR_NUM=${{ github.event.pull_request.number }}
          echo "environment=pr-${PR_NUM}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUM}" >> $GITHUB_OUTPUT

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

[% for service in services %]
      # Build and deploy [[ service.name ]]
      - name: Build [[ service.name ]] image
        run: |
          docker build -t ${{ env.REGISTRY }}/[[ project.name ]]-[[ service.name ]]:pr-${{ steps.pr-env.outputs.pr_number }}-${{ github.sha }} \
            -f [[ service.dockerfile ]] \
            [[ service.context ]]
          docker push ${{ env.REGISTRY }}/[[ project.name ]]-[[ service.name ]]:pr-${{ steps.pr-env.outputs.pr_number }}-${{ github.sha }}

      - name: Deploy [[ service.name ]] to PR environment
        uses: azure/container-apps-deploy-action@v1
        with:
          containerAppName: [[ project.name ]]-[[ service.name ]]-${{ steps.pr-env.outputs.environment }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY }}/[[ project.name ]]-[[ service.name ]]:pr-${{ steps.pr-env.outputs.pr_number }}-${{ github.sha }}
          location: [[ azure.location ]]
          environmentVariables: |
            ENVIRONMENT=${{ steps.pr-env.outputs.environment }}
            SERVICE_NAME=[[ service.name ]]
            PR_NUMBER=${{ steps.pr-env.outputs.pr_number }}
[% if service.external %]
          ingress: external
          targetPort: [[ service.port ]]
[% else %]
          ingress: internal
          targetPort: [[ service.port ]]
[% endif %]
          cpuCore: '[[ service.cpu ]]'
          memory: '[[ service.memory ]]'
          minReplicas: 1
          maxReplicas: 2
[% if azure.log_analytics_workspace_id %]
          logAnalyticsWorkspaceId: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          logAnalyticsWorkspaceKey: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}
[% endif %]

[% endfor %]
      - name: Get PR environment URLs
        id: urls
        run: |
          echo "### PR Environment Deployed! ðŸš€" >> pr_comment.md
          echo "" >> pr_comment.md
          echo "**Environment:** \`${{ steps.pr-env.outputs.environment }}\`" >> pr_comment.md
          echo "**Commit:** \`${{ github.sha }}\`" >> pr_comment.md
          echo "" >> pr_comment.md
          echo "**Services:**" >> pr_comment.md
[% for service in services %]
[% if service.external %]
          FQDN=$(az containerapp show \
            --name [[ project.name ]]-[[ service.name ]]-${{ steps.pr-env.outputs.environment }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "- **[[ service.name ]]**: https://${FQDN}" >> pr_comment.md
[% else %]
          echo "- **[[ service.name ]]**: Internal service (no external URL)" >> pr_comment.md
[% endif %]
[% endfor %]
          echo "" >> pr_comment.md
          echo "This environment will be automatically cleaned up when the PR is closed." >> pr_comment.md

      - name: Comment PR with environment info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr_comment.md', 'utf8');
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Environment Deployed!')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }